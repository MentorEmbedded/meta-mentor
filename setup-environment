if [ -z "$ZSH_NAME" ] && [ "x$0" = "x./setup-environment" ]; then
    echo >&2 "Error: This script needs to be sourced. Please run as '. ./setup-environment'"
else
    if [ -n "$BASH_SOURCE" ]; then
        layerdir="`dirname $BASH_SOURCE`"
    elif [ -n "$ZSH_NAME" ]; then
        layerdir="`dirname $0`"
    else
        layerdir="`pwd`"
    fi
    layerdir=`readlink -f "$layerdir"`

    export PYENV_ROOT="${PYENV_ROOT:-~/.pyenv}"
    PATH="$PYENV_ROOT/shims:$PATH"

    if [ -f conf/local.conf -o -f conf/bblayers.conf ]; then
        # Assuming we're already in the build dir
        BUILDDIR=$PWD
    else
        BUILDDIR=$PWD/build
    fi

    for i in $(seq $#); do
        setup_mel_arg="$(eval printf "%s" "\$$i")"
        case "$setup_mel_arg" in
            -b)
                BUILDDIR="$(eval printf "%s" "\$$(expr $i + 1)")"
                if [ -z "$BUILDDIR" ]; then
                    echo >&2 "-b requires an argument"
                fi
                ;;
        esac
    done

    (
        for layercheck in $layerdir . $layerdir/..; do
            if [ -e "$layercheck/setup-environment.conf" ]; then
                . "$layercheck/setup-environment.conf"
            fi
            if [ -e "$layercheck/.setup-environment.conf" ]; then
                . "$layercheck/.setup-environment.conf"
            fi
        done

        if [ "${DISTRO}" = "mel-lite" ]; then
            OPTIONALLAYERS="${OPTIONALLAYERS-tracing-layer}"
        else
            OPTIONALLAYERS="${OPTIONALLAYERS-mentor-private tracing-layer}"
        fi
        # Customer directory layers handling (e.g. <customername>-custom)
        for layercheck in . $layerdir/..; do
            if [ -e "$layercheck/customer.conf" ]; then
                while read -r _customer; do
                    for layercheck2 in . $layerdir/..; do
                        if [ -d "$layercheck2/$_customer-custom" ]; then
                            if [ -e "$layercheck2/$_customer-custom/custom.conf" ] ; then
                                CUSTOMERLAYERS=`cat $layercheck2/$_customer-custom/custom.conf | sed -e '/^[ 	]*#/d'`
                                CUSTOMERLAYERS=`echo $CUSTOMERLAYERS | sed -e 's/\n//g'`
                                OPTIONALLAYERS="$OPTIONALLAYERS $CUSTOMERLAYERS"
                            fi
                            break
                        fi
                    done
                done <"$layercheck/customer.conf"
                break
            fi
        done

        # Hotfix layers handling
        if [ -e "$layerdir/../hotfixes/hotfix.conf" ] ; then
            HOTFIXES=`cat $layerdir/../hotfixes/hotfix.conf | sed -e '/^[ 	]*#/d'`
            HOTFIXES=`echo $HOTFIXES | sed -e 's/\n//g'`
            OPTIONALLAYERS="$OPTIONALLAYERS $HOTFIXES"
        fi

        # Extra layers handling
        if [ -e "$layerdir/../xlayers.conf" ] ; then
            EXTRALAYERS=`cat $layerdir/../xlayers.conf | sed -e '/^[ 	]*#/d'`
            EXTRALAYERS=`echo $EXTRALAYERS | sed -e 's/\n//g'`
            OPTIONALLAYERS="$OPTIONALLAYERS $EXTRALAYERS"
        fi

        export OPTIONALLAYERS EXTRAMELLAYERS EXCLUDEDLAYERS
        if [ -e "$BUILDDIR" ]; then
            existing_builddir=1
        else
            existing_builddir=0
        fi
        $layerdir/scripts/setup-mel-builddir "$@"
        if [ $? -ne 0 ]; then
            if [ $existing_builddir -eq 0 ]; then
                # New build dir, clean up on failure
                rm -r "$BUILDDIR"
            fi
            exit 1
        fi
    )
    mel_setup_ret=$?
    if [ $mel_setup_ret -eq 0 ] && [ -n "$BUILDDIR" ] && [ -e "$BUILDDIR" ]; then
        . $BUILDDIR/setup-environment >/dev/null 2>&1

        configured_layers () {
            tac $BUILDDIR/conf/bblayers.conf | \
                sed -n -e '/^"/,/^BBLAYERS = /{ /^BBLAYERS =/d; /^"/d; p;}' | \
                awk {'print $1'} | sed -e "s#\${TOPDIR}/#$BUILDDIR/#"
        }

        load_lconf_snippet () {
            if [ ! -e "$1/$2" ]; then
                return
            fi
            (
            lheadername="${1##*/}/$2"
            printf '\n## Begin %s\n\n' "$lheadername"
            cat "$1/$2"
            printf '\n## End %s\n' "$lheadername"
            ) >>conf/local.conf
        }

        if [ -e $layerdir/post-setup-environment ]; then
            . $layerdir/post-setup-environment
        fi

        sed -i -n -e ":out; /^## Begin /{ :loop; /^## End /{ d; b out; }; n; b loop; }; p;" conf/local.conf
        SETUP_ENV_MACHINE="$(sed -n -e 's/^MACHINE *?*= *"\(.*\)"/\1/p' "$BUILDDIR/conf/local.conf")"

        load_lconf_snippet "$layerdir" "conf/local.conf.append"
        load_lconf_snippet "$layerdir" "conf/local.conf.append.$SETUP_ENV_MACHINE"
        configured_layers | grep -vx "$layerdir" | while read layer; do
            if [ -e $layer/post-setup-environment ]; then
                . $layer/post-setup-environment
            fi
            load_lconf_snippet "$layer" "conf/local.conf.append"
            load_lconf_snippet "$layer" "conf/local.conf.append.$SETUP_ENV_MACHINE"
        done

        . $BUILDDIR/setup-environment

        unset SETUP_ENV_MACHINE
        unset load_lconf_snippet
        unset configured_layers
    fi
    unset layerdir setup_mel_arg
    test $mel_setup_ret -eq 0
fi
