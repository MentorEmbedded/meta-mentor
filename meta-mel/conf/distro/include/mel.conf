DISTRO_VERSION = "next+snapshot-${DATE}"
MAINTAINER = "Mentor Graphics Corporation <embedded_support@mentor.com>"
TARGET_VENDOR = "-mel"
SDK_VENDOR = "-melsdk"
SDK_VERSION := "${@'${DISTRO_VERSION}'.replace('snapshot-${DATE}','snapshot')}"

META_MENTOR_DIR = "${LAYERDIR_mel}/.."
PATH_prepend = "${META_MENTOR_DIR}/scripts:"

# We want media to auto-mount
DISTRO_EXTRA_RRECOMMENDS += "udev-extraconf"

# Paths
MELDIR ?= "${COREBASE}/.."

# Use a local PR server by default
PRSERV_HOST ?= "localhost:0"

# Default to ipk packaging
PACKAGE_CLASSES ?= "package_ipk"

# MEL's supported hosts
SANITY_TESTED_DISTROS = "\
    Ubuntu-16.04 \n\
    Ubuntu-14.04 \n\
    CentOS-7.* \n \
    CentOSLinux-7.* \n \
    RedHatEnterprise*-7.* \n \
"

# Sane default append for the kernel cmdline (not used by all BSPs)
# TODO: rename APPEND to something more appropriate
APPEND ?= "${APPEND_SERIAL} console=tty0 ${APPEND_SPLASH}"

APPEND_SPLASH = "${@'quiet splash' if '${SPLASH}' else ''}"
APPEND_SPLASH .= "${@' plymouth:ignore-serial-consoles' if '${SPLASH}' == 'plymouth' else ''}"

APPEND_SERIAL = "${@'console=${CMD_SERIAL_CONSOLE}' if '${SERIAL_CONSOLE}' else ''}"
CMD_SERIAL_CONSOLE ?= "${@','.join(reversed('${SERIAL_CONSOLE}'.split()))}"

APPEND_KGDBOC = "kgdbwait kgdboc=${CMD_SERIAL_CONSOLE}"

# Splash screen
SPLASH ?= "psplash"
PLYMOUTH_THEME ?= "mel"
PLYMOUTH_SHOWDELAY ?= "0"
DISTRO_EXTRA_RRECOMMENDS += "${@'plymouth-mel' if '${SPLASH}' == 'plymouth' else ''}"

# Configuring plymouth to use the logo rather than modifying the theme script
# to use it is a tradeoff. It lets you switch themes while keeping the same
# splash screen, which is nice, the downside is a change to the logo requires
# recompilation of plymouth.
PLYMOUTH_LOGO ?= "${datadir}/plymouth/themes/mel/mel.png"
LOGO_pn-plymouth = "${PLYMOUTH_LOGO}"

# Default to these image types
IMAGE_FSTYPES ?= "tar.bz2 ext3"
UBI_VOLNAME = "rootfs"

# If a wic image type is enabled, also enable wic.bmap
require conf/distro/include/wic-bmap.inc

# Additional dependencies for deployed files are often pulled in via
# do_image_wic[depends], to ensure the files are available for
# IMAGE_BOOT_FILES, but this bypasses the do_image[recrdeptask] on
# do_populate_lic. Add it for do_image_wic as well.
do_image_wic[recrdeptask] += "do_populate_lic"

# do_image_complete requires licenses, so add recursive dependency
# on do_populate_lic
do_image_complete[recrdeptask] += "do_populate_lic"

# Quadruple the normal. 'du' is not a good way to really see how much
# space will be needed and fails badly as the fs size grows.
IMAGE_ROOTFS_EXTRA_SPACE = "40960"

# Sane default locales for images
GLIBC_GENERATE_LOCALES ?= "en_US en_US.UTF-8"
IMAGE_LINGUAS ?= "en-us"

# Ensure the emitted locale packages are in that section, so they can be
# easily excluded from the ADE (or categorized correctly, when included)
LOCALE_SECTION = "locale"

# We aren't quite so picky as poky, but we do want host user contamination to
# be an error.
WARN_TO_ERROR_QA = "host-user-contaminated"

# Also check for host user contamination in the rootfs
ROOTFS_POSTPROCESS_COMMAND_append = " rootfs_check_host_user_contaminated;"

# Default to systemd, not sysvinit
VIRTUAL-RUNTIME_init_manager ?= "systemd"
VIRTUAL-RUNTIME_initscripts ?= ""
DISTRO_FEATURES_BACKFILL_CONSIDERED ?= "sysvinit"
DISTRO_FEATURES_append = " systemd"

# Support shallow git tarballs
BB_GENERATE_SHALLOW_TARBALLS ?= "1"
BB_GIT_SHALLOW ?= "1"

BB_GIT_SHALLOW_DEPTH_DEFAULT ?= "1"
BB_GIT_SHALLOW_DEPTH ??= "${@'${BB_GIT_SHALLOW_DEPTH_DEFAULT}' if not '${BB_GIT_SHALLOW_REVS}' else '0'}"
BB_GIT_SHALLOW_REVS ??= ""

# For private repositories, we want to ship the user the history which they
# can't easily re-acquire from upstream.
LINUX_VERSION_TAG ??= "v${@'.'.join('${LINUX_VERSION}'.split('.')[:2])}"
LINUX_VERSION ??= ""
BB_GIT_SHALLOW_REVS_pn-linux-mel ??= "${@'${LINUX_VERSION_TAG}' if '${LINUX_VERSION_TAG}' and '${LINUX_VERSION}' else ''}"

# Export path variables into the devshell for convenience
OE_TOPDIR = "${TOPDIR}"
OE_WORKDIR = "${WORKDIR}"
OE_TERMINAL_EXPORTS += "OE_TOPDIR OE_WORKDIR COREBASE"

## Distro Features & Recipe Configuration {{{1
# The user can enable ptest from local.conf, and wayland is not yet supported
POKY_DEFAULT_DISTRO_FEATURES_remove = "ptest wayland"

# We always want vfat support in our distro for external media
DISTRO_FEATURES_append = " vfat"

# There are better options to solve the problem .la files solved
INHERIT += "remove-libtool"

# Ensure fbset is in busybox configuration, and fbset-modes is included
PACKAGECONFIG_append_pn-busybox = " fbset"

# Since many embedded systems don't have non-root users, allow autospawn for
# root as well.
PACKAGECONFIG_append_pn-pulseaudio = " autospawn-for-root"

# The PACKAGECONFIG_REMOVE indirection exists to make it possible to override
# the removals, as bitbake doesn't provide a mechanism to do so yet
PACKAGECONFIG_REMOVE ??= ""
PACKAGECONFIG_remove = "${PACKAGECONFIG_REMOVE}"

# We prefer EGL to GLX
PACKAGECONFIG_REMOVE_pn-mesa-demos = "glx"

# We don't use dracut to build initramfs
PACKAGECONFIG_REMOVE_pn-plymouth = "initrd"

# Ensure we have the writable paths we need in a read-only rootfs

# If the user-data feature is in the picture, it takes over ownership of
# determining what to do with ROOT_HOME and bind mounts.

ROOT_HOME_BIND = "\
    /var/volatile/root-home ${ROOT_HOME}\n\
"
VOLATILE_BINDS_append = "\
    ${@bb.utils.contains('COMBINED_FEATURES', 'user-data', '', d.getVar('ROOT_HOME_BIND', True), d)}\
"
## }}}1
## Inherits {{{1
# We want information about package and image contents
INHERIT += "buildhistory"
BUILDHISTORY_COMMIT ?= "1"

# Copy the image license manifest into DEPLOY_DIR_IMAGE
INHERIT += "deploy-license-manifest"

# Support USER_FEATURES
INHERIT += "user_features"

# Do an up front type check to sanity check user configuration
INHERIT += "typecheck"

# Import oe.terminal to allow a type check of OE_TERMINAL
OE_IMPORTS += "oe.terminal"

# Warn if there are available update layers which are not included in the
# current configuration
INHERIT += "mentor-updates-check"

# Check PDK license
INHERIT += "${@'pdk-license' if 'mentor-private' in '${BBFILE_COLLECTIONS}'.split() else ''}"

# Write cb-mbs-options for CodeBench
INHERIT += "${@'cb-mbs-options' if 'mentor-private' in '${BBFILE_COLLECTIONS}'.split() else ''}"

# Warn the user and disable rootfs resizing for non-GPLv3 builds
INHERIT += "resize-rootfs-gplv3"
## }}}1
## Preferences & Package Selection {{{1
# Prefer the chkconfig C implementation of alternatives
VIRTUAL-RUNTIME_update-alternatives = "chkconfig-alternatives"
PREFERRED_PROVIDER_virtual/update-alternatives = "chkconfig-alternatives"
PACKAGECONFIG_remove_pn-opkg-utils = "update-alternatives"
PREFERRED_PROVIDER_virtual/update-alternatives-native = "chkconfig-alternatives-native"
PACKAGECONFIG_remove_pn-opkg-utils-native = "update-alternatives"

# chkconfig-alternatives fails to build for sdkmingw32, so use this instead
VIRTUAL-RUNTIME_update-alternatives_class-nativesdk = "opkg-utils"
PREFERRED_PROVIDER_virtual/nativesdk-update-alternatives = "nativesdk-opkg-utils"

# Default to the Xorg X server if the BSP doesn't specify
XSERVER ??= "\
    xserver-xorg \
    xf86-input-evdev \
    xf86-input-mouse \
    xf86-input-keyboard \
    xf86-video-fbdev \
"

# We split out the initramfs install script bits into
# core-image-minimal-install-initramfs, to keep core-image-minimal-initramfs
# as generic as possible, but image-live may well expect the install bits.
INITRD_IMAGE_LIVE ?= "core-image-minimal-install-initramfs"

# Additional package groups
FEATURE_PACKAGES_codebench-debug ?= "gdbserver strace openssh-sftp-server"
FEATURE_PACKAGES_nas             ?= "packagegroup-role-nas"
FEATURE_PACKAGES_print-server    ?= "packagegroup-role-print-server"
FEATURE_PACKAGES_router          ?= "packagegroup-role-router"
FEATURE_PACKAGES_tools-audio     ?= "packagegroup-tools-audio"
FEATURE_PACKAGES_tools-benchmark ?= "packagegroup-tools-benchmark"

# Analogous to the nfs-server group
FEATURE_PACKAGES_samba-server    ?= "samba swat"

# Include nss-myhostname for sysvinit, so the hostname resolves. systemd
# includes myhostname itself.
DISTRO_EXTRA_RRECOMMENDS += "${@bb.utils.contains('DISTRO_FEATURES', 'systemd', '', 'nss-myhostname', d)}"

# Include vmlinux in DEPLOY_DIR_IMAGE for debugging purposes
KERNEL_IMAGETYPES_append = " vmlinux"
## }}}1
## Workarounds & Overrides {{{1
# We aren't supporting meta-intel's RMC
BBMASK += "/meta-intel/common/recipes-bsp/systemd-boot/"

# Work around Ubuntu 14.04 issue with passing PATH to a subprocess via the
# 'env' argument with shell=True
OE_IMPORTS += "${@bb.utils.contains('BBFILE_COLLECTIONS', 'mentor-staging', 'oe.terminal_override', '', d)}"
INHERIT += "${@bb.utils.contains('BBFILE_COLLECTIONS', 'mentor-staging', 'terminal_override', '', d)}"

# Align the external toolchain with the internal one. This is also needed for
# Sourcery Analyzer with lttng-ust
TARGET_LDFLAGS += "-Wl,--build-id=sha1"

# Explicitly remove the proprietary stuff
MACHINE_HWCODECS = ""

# Work around missing vardep bug in bitbake
sstate_stage_all[vardeps] += "sstate_stage_dirs"

# Assemble a recipe-local postinst-intecepts directory by gathering intercepts
# from BBPATH. This lets layers override intercepts. This functionality
# belongs upstream.
IMAGE_CLASSES += "bbpath-intercepts"
## }}}1
## SDK & Application Development Environment {{{1
# As we remove the toolchain from the sdk, naming it 'toolchain' is not
# accurate, and sdk better describes what it is anyway.
TOOLCHAIN_OUTPUTNAME ?= "${SDK_NAME}-sdk-${SDK_VERSION}"

# Add KERNEL_* to the SDK environment (unexported) for use by the user
TOOLCHAIN_TARGET_TASK_append = " sdk-env-kernelvars"

# This allows us to control what base target packages are installed for the
# configured multilibs, by altering SDK_MULTILIB_VARIANTS to differ from
# MULTILIB_VARIANTS. We also append meta-environment to obey
# SDK_MULTILIB_VARIANTS as well.
IMAGE_CLASSES += "image-sdk-multilib-variants"

# We want to be able to run the SDK/ADE relocation script when we first source
# the environment setup, rather than just at install time. This means the
# SDK/ADE can be moved, and also works with non-shar installers like the ADE.
INHERIT += "sdk_auto_relocate"

# Cull duplicate/invalid files for windows SDKMACHINEs
IMAGE_CLASSES += "win_sdk_cull"

# We need to ensure we can distribute downloads for SDK/ADE builds
IMAGE_CLASSES += "archive_sdk_downloads"

# Create a 'latest' symlink for the SDK
IMAGE_CLASSES += "sdk_latest_link"

DATETIME_SECS = "${@int(time.mktime(time.strptime('${DATETIME}', '%Y%m%d%H%M%S')))}"
DATETIME_SECS[doc] = "The timestamp from the DATETIME variable, as seconds since 1970."

# Configure the ADE
DEPLOY_DIR_ADE ?= "${DEPLOY_DIR}/ade"
ADE_PROVIDER ?= "Mentor Graphics Corporation"
# The ADE_VERSION has to stay numeric with . separators
OE_IMPORTS += "string"
ADE_VERSION ?= "${@'0.0' if not all(c in string.digits for c in '${SDK_VERSION}'.split('.')[0]) else '${SDK_VERSION}'}.${DATETIME_SECS}"
ADE_VERSION[vardepsexclude] += "DATETIME_SECS"
ADE_IDENTIFIER ?= "${SDKMACHINE}-${IMAGE_BASENAME}-${MACHINE}-${ADE_VERSION}"
ADE_IDENTIFIER_SUBDIR = "/ade-${ADE_IDENTIFIER}"
ADE_SITENAME ?= "ADE for ${ADE_IDENTIFIER}"
ADE_TOP_CATEGORY ?= "${DISTRO_NAME} ADE"

# Configure populate_sdk_p2 for the ADE
SDK_P2_DEPLOY = "${DEPLOY_DIR_ADE}"
SDK_P2_OUTPUTNAME = "ade-${ADE_IDENTIFIER}"
SDK_P2_REPO = "${SDK_P2_DEPLOY}/${SDK_P2_OUTPUTNAME}"
SDK_P2_INSTALL_PATH = "/../../mel/ade${ADE_IDENTIFIER_SUBDIR}"
SDK_P2_TITLE = "${ADE_SITENAME}"
SDK_P2_CATEGORY = "${ADE_TOP_CATEGORY}"
SDK_P2_CATEGORY_NAME = "${ADE_TOP_CATEGORY}"
SDK_P2_VERSION = "${ADE_VERSION}"
SDK_P2_TIMESTAMP = "${DATETIME_SECS}"
SDK_P2_TIMESTAMP[vardepsexclude] += "DATETIME_SECS"

# Fixup these vars to use correct values for the image
SDK_RESET_ENV_SCRIPT_VARS += "\
    ADE_IDENTIFIER \
    ADE_SITENAME \
"

# If meta-mentor-private is available, pull in the populate-ade class
ADE_IMAGE_CLASS = "${@'populate_ade' if 'mentor-private' in '${BBFILE_COLLECTIONS}'.split() else ''}"
IMAGE_CLASSES += "${ADE_IMAGE_CLASS}"

# Add extra bits to the SDK/ADE environment setup scripts for CodeBench
gdb_serverpath ?= "${bindir}/gdbserver"
SOURCERY_BASE_VERSION = "${@'${SOURCERY_VERSION}'.split('-', 1)[0] if 'SOURCERY_VERSION' in d else ''}"
EXTRA_SDK_VARS += "\
    MACHINE \
    DISTRO \
    DISTRO_NAME \
    DISTRO_VERSION \
    ADE_IDENTIFIER \
    ADE_SITENAME \
    ADE_VERSION \
    gdb_serverpath \
    SOURCERY_VERSION \
    SOURCERY_BASE_VERSION:TOOLCHAIN_VERSION \
"
INHERIT += "sdk_extra_vars"
## }}}1
## MEL Releases {{{1
# Default image for our installers
RELEASE_IMAGE ?= "console-image"

# Don't distribute shared state for now
RELEASE_ARTIFACTS ?= "layers bitbake templates images downloads probeconfigs"

# Apply any release-time srcrev lockdowns for AUTOREV recipes
include ${MELDIR}/${MACHINE}/conf/autorevs.conf

# LAYERDIRs for our layers, by name
INHERIT += "layerdirs"

# Layer name and path for the recipe
RECIPE_LAYERNAME = "${@bb.utils.get_file_layer('${FILE}', d) or 'UNKNOWN'}"
RECIPE_LAYERDIR = "${LAYERDIR_${RECIPE_LAYERNAME}}"
LAYERDIR_UNKNOWN = 'UNKNOWN'

# Support pulling downloads and sstate from inside individual layers. This
# will let us ship self contained layers to a release without risking file
# conflicts between them.
PREMIRRORS_prepend = "${@'.*://.*/.* file://${RECIPE_LAYERDIR}/downloads\n' if '${RECIPE_LAYERDIR}' != 'UNKNOWN' else ''}"
LAYER_SSTATE_MIRRORS = "${@" ".join('file://%s' % sl for sl in ('%s/sstate-cache' % l for l in '${BBLAYERS}'.split()) if os.path.exists(sl))}"
SSTATE_MIRROR_SITES_prepend = "${LAYER_SSTATE_MIRRORS} "

# Populate a tree of downloads organized by layer
ARCHIVE_RELEASE_DL_TOPDIR ?= "${DEPLOY_DIR}/release-downloads"
ARCHIVE_RELEASE_DL_DIR = "${ARCHIVE_RELEASE_DL_TOPDIR}/${RECIPE_LAYERNAME}"
DL_LICENSE_INCLUDE ?= "*"
INHERIT += "archive-release-downloads"
## }}}1
## Includes {{{1
# Ensure that we implement shared state reuse handling for non-target recipes
require conf/distro/include/sstate.inc

# Support for SOURCERY_VERSION_REQUIRED
require conf/distro/include/sourcery-version-check.inc

# Sanely handle the GPLv3 gdbserver coming from external-sourcery-toolchain
require conf/distro/include/gdbserver-gplv3.inc

# Handle building blocks
require conf/blocks/bluetooth.conf
require conf/blocks/speech-synthesis.conf
require conf/blocks/speech-recognition.conf

# QT5 configuration. These are includes rather than requires, as they live in
# other layers.
include conf/distro/include/qt5-mel.conf
include conf/distro/include/qt5-versions.inc

# Install bmap-tools version 2.5 inorder to support both Ubuntu 14.04 and 16.04 respectively.
PREFERRED_VERSION_bmap-tools-native = "2.5"

# Security / SELinux configuration.
include conf/distro/include/mel-security.conf
## }}}1
# vim: set fdm=marker fdl=0 :
